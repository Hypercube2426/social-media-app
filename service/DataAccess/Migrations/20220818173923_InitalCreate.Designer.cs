// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(HubContext))]
    [Migration("20220818173923_InitalCreate")]
    partial class InitalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entity.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = 0L,
                            Name = "Student",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 2,
                            Created = 0L,
                            Name = "Business",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 3,
                            Created = 0L,
                            Name = "Manager",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 4,
                            Created = 0L,
                            Name = "Admin",
                            Updated = 0L
                        });
                });

            modelBuilder.Entity("Core.Entity.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = 0L,
                            OperationClaimId = 4,
                            Updated = 0L,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entity.Concrete.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<int>("DepartmentCodeId")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentCodeId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = 0L,
                            DepartmentCodeId = 1,
                            FacultyId = 10,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 2,
                            Created = 0L,
                            DepartmentCodeId = 2,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 3,
                            Created = 0L,
                            DepartmentCodeId = 3,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 4,
                            Created = 0L,
                            DepartmentCodeId = 4,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 5,
                            Created = 0L,
                            DepartmentCodeId = 5,
                            FacultyId = 10,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 6,
                            Created = 0L,
                            DepartmentCodeId = 6,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 7,
                            Created = 0L,
                            DepartmentCodeId = 7,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 8,
                            Created = 0L,
                            DepartmentCodeId = 8,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 9,
                            Created = 0L,
                            DepartmentCodeId = 9,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 10,
                            Created = 0L,
                            DepartmentCodeId = 10,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 11,
                            Created = 0L,
                            DepartmentCodeId = 11,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 12,
                            Created = 0L,
                            DepartmentCodeId = 12,
                            FacultyId = 5,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 13,
                            Created = 0L,
                            DepartmentCodeId = 13,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 14,
                            Created = 0L,
                            DepartmentCodeId = 14,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 15,
                            Created = 0L,
                            DepartmentCodeId = 15,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 16,
                            Created = 0L,
                            DepartmentCodeId = 16,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 17,
                            Created = 0L,
                            DepartmentCodeId = 17,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 18,
                            Created = 0L,
                            DepartmentCodeId = 18,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 19,
                            Created = 0L,
                            DepartmentCodeId = 19,
                            FacultyId = 10,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 20,
                            Created = 0L,
                            DepartmentCodeId = 20,
                            FacultyId = 4,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 21,
                            Created = 0L,
                            DepartmentCodeId = 21,
                            FacultyId = 5,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 22,
                            Created = 0L,
                            DepartmentCodeId = 22,
                            FacultyId = 6,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 23,
                            Created = 0L,
                            DepartmentCodeId = 23,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 24,
                            Created = 0L,
                            DepartmentCodeId = 24,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 25,
                            Created = 0L,
                            DepartmentCodeId = 25,
                            FacultyId = 5,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 26,
                            Created = 0L,
                            DepartmentCodeId = 26,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 27,
                            Created = 0L,
                            DepartmentCodeId = 27,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 28,
                            Created = 0L,
                            DepartmentCodeId = 28,
                            FacultyId = 5,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 29,
                            Created = 0L,
                            DepartmentCodeId = 29,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 30,
                            Created = 0L,
                            DepartmentCodeId = 30,
                            FacultyId = 7,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 31,
                            Created = 0L,
                            DepartmentCodeId = 31,
                            FacultyId = 7,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 32,
                            Created = 0L,
                            DepartmentCodeId = 32,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 33,
                            Created = 0L,
                            DepartmentCodeId = 33,
                            FacultyId = 5,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 34,
                            Created = 0L,
                            DepartmentCodeId = 34,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 35,
                            Created = 0L,
                            DepartmentCodeId = 35,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 36,
                            Created = 0L,
                            DepartmentCodeId = 36,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 37,
                            Created = 0L,
                            DepartmentCodeId = 37,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 38,
                            Created = 0L,
                            DepartmentCodeId = 38,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 39,
                            Created = 0L,
                            DepartmentCodeId = 39,
                            FacultyId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 40,
                            Created = 0L,
                            DepartmentCodeId = 40,
                            FacultyId = 8,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 41,
                            Created = 0L,
                            DepartmentCodeId = 41,
                            FacultyId = 3,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 42,
                            Created = 0L,
                            DepartmentCodeId = 42,
                            FacultyId = 2,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 43,
                            Created = 0L,
                            DepartmentCodeId = 43,
                            FacultyId = 5,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 44,
                            Created = 0L,
                            DepartmentCodeId = 44,
                            FacultyId = 9,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 45,
                            Created = 0L,
                            DepartmentCodeId = 45,
                            FacultyId = 3,
                            Updated = 0L
                        });
                });

            modelBuilder.Entity("Entity.Concrete.DepartmentCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DepartmentCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = 0L,
                            Name = "Acil Yardım ve Afet Yönetimi",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 2,
                            Created = 0L,
                            Name = "Alman Dili ve Edebiyatı",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 3,
                            Created = 0L,
                            Name = "Arkeoloji",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 4,
                            Created = 0L,
                            Name = "Bahçe Bitkileri",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 5,
                            Created = 0L,
                            Name = "Beslenme ve Diyetetik",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 6,
                            Created = 0L,
                            Name = "Bilgisayar Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 7,
                            Created = 0L,
                            Name = "Bitki Koruma",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 8,
                            Created = 0L,
                            Name = "Biyoloji",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 9,
                            Created = 0L,
                            Name = "Biyomedikal Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 10,
                            Created = 0L,
                            Name = "Biyosistem Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 11,
                            Created = 0L,
                            Name = "Coğrafya",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 12,
                            Created = 0L,
                            Name = "Çalışma Ekonomisi ve Endüstri İlişkileri",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 13,
                            Created = 0L,
                            Name = "Çevre Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 14,
                            Created = 0L,
                            Name = "Elektrik-Elektronik Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 15,
                            Created = 0L,
                            Name = "Endüstri Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 16,
                            Created = 0L,
                            Name = "Fizik",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 17,
                            Created = 0L,
                            Name = "Fransız Dili ve Edebiyatı",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 18,
                            Created = 0L,
                            Name = "Gıda Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 19,
                            Created = 0L,
                            Name = "Hemşirelik",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 20,
                            Created = 0L,
                            Name = "Hukuk",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 21,
                            Created = 0L,
                            Name = "İktisat",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 22,
                            Created = 0L,
                            Name = "İlahiyat",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 23,
                            Created = 0L,
                            Name = "İngiliz Dili ve Edebiyatı",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 24,
                            Created = 0L,
                            Name = "İnşaat Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 25,
                            Created = 0L,
                            Name = "İşletme",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 26,
                            Created = 0L,
                            Name = "Kimya",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 27,
                            Created = 0L,
                            Name = "Makine Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 28,
                            Created = 0L,
                            Name = "Maliye",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 29,
                            Created = 0L,
                            Name = "Matematik",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 30,
                            Created = 0L,
                            Name = "Mimarlık",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 31,
                            Created = 0L,
                            Name = "Peyzaj Mimarlığı",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 32,
                            Created = 0L,
                            Name = "Psikoloji",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 33,
                            Created = 0L,
                            Name = "Siyaset Bilimi ve Kamu Yönetimi",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 34,
                            Created = 0L,
                            Name = "Sosyoloji",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 35,
                            Created = 0L,
                            Name = "Tarım Ekonomisi",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 36,
                            Created = 0L,
                            Name = "Tarımsal Biyoteknoloji",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 37,
                            Created = 0L,
                            Name = "Tarih",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 38,
                            Created = 0L,
                            Name = "Tarla Bitkileri",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 39,
                            Created = 0L,
                            Name = "Tekstil Mühendisliği",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 40,
                            Created = 0L,
                            Name = "Tıp",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 41,
                            Created = 0L,
                            Name = "Toprak Bilimi ve Bitki Besleme",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 42,
                            Created = 0L,
                            Name = "Türk Dili ve Edebiyatı",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 43,
                            Created = 0L,
                            Name = "Uluslararası İlişkiler",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 44,
                            Created = 0L,
                            Name = "Veterinerlik",
                            Updated = 0L
                        },
                        new
                        {
                            Id = 45,
                            Created = 0L,
                            Name = "Zootekni",
                            Updated = 0L
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Altitude")
                        .HasColumnType("double");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Çorlu Mühendislik Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 2,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Fen-Edebiyat Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 3,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Ziraat Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 4,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Hukuk Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 5,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "İktisadi ve İdari Bilimler Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 6,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "İlahiyat Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 7,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Güzel Sanatlar, Tasarım ve Mimarlık Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 8,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Tıp Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 9,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Veteriner Fakültesi",
                            UniversityId = 1,
                            Updated = 0L
                        },
                        new
                        {
                            Id = 10,
                            Address = "Çorlu, silahtarağa mah.",
                            Altitude = 21.213124000000001,
                            Created = 0L,
                            Latitude = 43.213411999999998,
                            Name = "Sağlık Yüksekokulu",
                            UniversityId = 1,
                            Updated = 0L
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Entity.Concrete.PostHasTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostHasTag");
                });

            modelBuilder.Entity("Entity.Concrete.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Entity.Concrete.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<int>("FoundationYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "29",
                            Created = 0L,
                            FoundationYear = 2000,
                            Name = "Tekirdağ Namık Kemal Üniversitesi",
                            Updated = 0L
                        });
                });

            modelBuilder.Entity("Entity.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = 0L,
                            Email = "berkslv@gmail.com",
                            Name = "Berk Selvi",
                            PasswordHash = new byte[] { 17, 246, 222, 19, 201, 129, 90, 142, 254, 110, 223, 243, 163, 127, 145, 171, 24, 52, 116, 93, 60, 199, 19, 36, 167, 163, 9, 131, 170, 184, 63, 151, 146, 174, 51, 234, 1, 96, 237, 138, 27, 12, 146, 96, 160, 190, 159, 78, 15, 250, 220, 115, 45, 162, 237, 73, 212, 108, 28, 168, 14, 119, 28, 161 },
                            PasswordSalt = new byte[] { 229, 151, 213, 208, 78, 84, 74, 6, 226, 61, 79, 120, 79, 110, 47, 42, 123, 25, 218, 121, 163, 173, 212, 203, 117, 65, 163, 145, 24, 9, 39, 124, 0, 209, 100, 26, 12, 235, 236, 50, 209, 144, 134, 19, 197, 26, 79, 254, 138, 221, 90, 27, 136, 107, 145, 48, 73, 247, 184, 166, 217, 130, 38, 48, 41, 95, 196, 110, 49, 236, 120, 29, 112, 110, 189, 19, 129, 79, 190, 215, 98, 36, 50, 251, 236, 252, 8, 143, 97, 175, 66, 154, 132, 27, 202, 117, 222, 125, 94, 191, 220, 61, 254, 186, 193, 58, 109, 24, 250, 164, 87, 207, 149, 200, 57, 137, 91, 153, 250, 37, 22, 23, 161, 77, 11, 52, 122, 77 },
                            Role = "Admin",
                            Status = true,
                            Updated = 0L,
                            Username = "berkslv"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.UserCode", b =>
                {
                    b.Property<int>("UserCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCodes");
                });

            modelBuilder.Entity("Entity.Concrete.UserDislikeComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("UserDislikeComment");
                });

            modelBuilder.Entity("Entity.Concrete.UserDislikePost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserDislikePost");
                });

            modelBuilder.Entity("Entity.Concrete.UserLikeComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("UserLikeComment");
                });

            modelBuilder.Entity("Entity.Concrete.UserLikePost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<long>("Created")
                        .HasColumnType("bigint");

                    b.Property<long>("Updated")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserLikePost");
                });

            modelBuilder.Entity("Entity.Concrete.Comment", b =>
                {
                    b.HasOne("Entity.Concrete.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Entity.Concrete.Department", b =>
                {
                    b.HasOne("Entity.Concrete.DepartmentCode", "DepartmentCode")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentCode");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Entity.Concrete.Faculty", b =>
                {
                    b.HasOne("Entity.Concrete.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Entity.Concrete.Post", b =>
                {
                    b.HasOne("Entity.Concrete.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Entity.Concrete.PostHasTag", b =>
                {
                    b.HasOne("Entity.Concrete.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Tag", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Entity.Concrete.User", b =>
                {
                    b.HasOne("Entity.Concrete.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Entity.Concrete.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("FacultyId");

                    b.HasOne("Entity.Concrete.University", "University")
                        .WithMany("Users")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Entity.Concrete.UserCode", b =>
                {
                    b.HasOne("Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concrete.UserDislikeComment", b =>
                {
                    b.HasOne("Entity.Concrete.Comment", "Comment")
                        .WithMany("Dislikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.User", "User")
                        .WithMany("DislikedComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concrete.UserDislikePost", b =>
                {
                    b.HasOne("Entity.Concrete.Post", "Post")
                        .WithMany("Dislikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.User", "User")
                        .WithMany("DislikedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concrete.UserLikeComment", b =>
                {
                    b.HasOne("Entity.Concrete.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.User", "User")
                        .WithMany("LikedComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concrete.UserLikePost", b =>
                {
                    b.HasOne("Entity.Concrete.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.User", "User")
                        .WithMany("LikedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concrete.Comment", b =>
                {
                    b.Navigation("Dislikes");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Entity.Concrete.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entity.Concrete.DepartmentCode", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Entity.Concrete.Faculty", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entity.Concrete.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Dislikes");

                    b.Navigation("Likes");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Entity.Concrete.Tag", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Entity.Concrete.University", b =>
                {
                    b.Navigation("Faculties");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entity.Concrete.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DislikedComments");

                    b.Navigation("DislikedPosts");

                    b.Navigation("LikedComments");

                    b.Navigation("LikedPosts");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
